' """
FILE: hash.bas

This is the BASIC import file for the module hash.

This file was generated by headerer.pl from the file 
Do not edit this file, rather edit the file  and use
headerer.pl to regenerate this file.
"""

module hash

'
' Module hash
'
' This module lets you create memory stored hashes.
'
' Note that refValue and refThisValue return references to
' the actual value and great care should be paid handling
' these directly
'
' NewHash to create a new hash
' ReleaseHash to release a hash
' StartHash to reset hash iteration to the first key
' EndHash to set hash iteration to the last key
' NextHashKey to get the next hash key in iteration
' PreviousHashKey to get the previous key in iteration
' GetHashValue to get the value for the given key
' SetHashValue to set the value for the given key
' DeleteHashKey to delete a hash key entirely from the hash


const ErrorInvalidHandle = &H80001
const ErrorNoThisKey     = &H80002

'
' Get a value for a given key
'
' q = hash::Value(h,key)
function ::Value(h,k)
  ::Value = ByVal ::refValue(h,k)
end function

'
' Get the value of the actual key/value pair
'
' v = hash::ThisValue(h)
function ::ThisValue(h)
  ::ThisValue = ByVal ::refThisValue(h)
end function


' FUNCTION DECLARATIONS 
declare sub     ::New          alias "newh"   lib "hash"
declare sub     ::SetValue     alias "sethv"  lib "hash"
declare sub     ::refValue     alias "gethv"  lib "hash"
declare sub     ::Exists       alias "ivhv"   lib "hash"
declare sub     ::Delete       alias "delhk"  lib "hash"
declare sub     ::Start        alias "starth" lib "hash"
declare sub     ::End          alias "endh"   lib "hash"
declare sub     ::Next         alias "nexthk" lib "hash"
declare sub     ::Prev         alias "pervhk" lib "hash"
declare sub     ::ThisKey      alias "thishk" lib "hash"
declare sub     ::refThisValue alias "thishv" lib "hash"
declare sub     ::Release      alias "relh"   lib "hash"

end module

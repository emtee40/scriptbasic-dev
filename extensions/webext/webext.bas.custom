' WebExt Functions - John Spikowski

MODULE WEB

DECLARE SUB ::base64_encode ALIAS "base64_encode" LIB "webext"
DECLARE SUB ::base64_decode ALIAS "base64_decode" LIB "webext"
DECLARE SUB ::hmacsha256    ALIAS "hmacsha256"    LIB "webext"
DECLARE SUB ::LoadString    ALIAS "loadstring"    LIB "t"
DECLARE SUB loadstr         ALIAS "loadstr"       lib "json"
DECLARE SUB loadfile        ALIAS "loadfile"      LIB "json"
DECLARE SUB count           ALIAS "count"         LIB "json"
DECLARE SUB getName         ALIAS "getName"       LIB "json"
DECLARE SUB getObject       ALIAS "getobject"     LIB "json"
DECLARE SUB objtype         ALIAS "type"          LIB "json"
DECLARE SUB get             ALIAS "get"           LIB "json"
DECLARE SUB getArray        ALIAS "getArray"      LIB "json"



FUNCTION Bin2Hex(AsciiStr)
  LOCAL AsciiLen,ScanPos,HexStr
  AsciiLen = LEN(AsciiStr)
  IF AsciiLen THEN
    FOR ScanPos = 1 TO AsciiLen
      HexStr &= RIGHT("0" & LCASE(HEX(ASC(MID(AsciiStr, ScanPos, 1)))),2)
    NEXT ScanPos
  ELSE
    HexStr = ""
  END IF
  Bin2Hex = HexStr
END FUNCTION

FUNCTION Hex2Bin(HexStr)

  LOCAL LenHex, AsciiStr, HexTable, ScanPos, HiByte, LowByte
  LenHex = LEN(HexStr)
  IF LenHex % 2 = 0 THEN
    HexTable = "0123456789ABCDEF"
    FOR ScanPos = 1 TO LenHex STEP 2
      HiByte = INSTR(HexTable,UCASE(MID(HexStr, ScanPos, 1))) - 1
      LowByte = INSTR(HexTable,UCASE(MID(HexStr, ScanPos + 1, 1))) - 1
      IF ISINTEGER(HiByte) AND ISINTEGER(LowByte) THEN
        AsciiStr &= CHR(HiByte * 16 + LowByte)
      ELSE
        AsciiStr = ""
        GOTO Exit_For
      END IF
    NEXT ScanPos
    Exit_For:
  ELSE
    AsciiStr = ""
  END IF
  Hex2Bin = AsciiStr

END FUNCTION

FUNCTION MATCH(index)
  MATCH = JOKER(index)
END FUNCTION


FUNCTION encode_url(urlin)
  LOCAL i, a, urlout
  urlout = ""
  a = ""
  FOR i = 1 to LEN(urlin)
    a = MID(urlin, i, 1)
    IF (a >= "0" AND a <= "9") _
      OR (a >= "A" AND a <= "Z") _
      OR (a >= "a" AND a <= "z") THEN
      urlout &= a
    ELSE
      urlout &= "%" & HEX(ASC(a))
    END IF
  NEXT
  encode_url = urlout
END FUNCTION


SUB mkarray(obj)

  LOCAL arr, objArray, tmpObj, oname, j, cnt, jType, dType

  FOR j = 0 TO count(obj) -1
    oname = getName(obj,j)
    tmpObj = getObject(obj, j)
    jType = objtype(obj,j)
    IF jType = 5 THEN
    ' Array
      IF level = 0 THEN
        i0 = oname
      ELSE IF level = 1 THEN
        i1 = oname
        tmp = root{i0}{i1}
      ELSE IF level = 2 THEN
        i2 = oname
        tmp = root{i0}{i1}{i2}
      ELSE IF level = 3 THEN
        i3 = oname
        tmp = root{i0}{i1}{i2}{i3}
      ELSE IF level = 4 THEN
        i4 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}
      ELSE IF level = 5 THEN
        i5 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}
      ELSE IF level = 6 THEN
        i6 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}
      ELSE IF level = 7 THEN
        i7 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}
      ELSE IF level = 8 THEN
        i8 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}
      ELSE IF level = 9 THEN
        i9 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}
      ELSE IF level = 10 THEN
        i10 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}
      ELSE IF level = 11 THEN
        i11 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}
      ELSE IF level = 12 THEN
        i12 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{i12}
      ELSE IF level = 13 THEN
        i13 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{i12}{i13}
      ELSE IF level = 14 THEN
        i14 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{i12}{i13}{i14}
      END IF
      arr = get(obj,oname)
      arr = getArray(arr)
      ' Create new array
      level += 1
      IF level = 0 THEN
        i0 = idx[level]
        tmp = root{io}
      ELSE IF level = 1 THEN
        i1 = idx[level]
        tmp = root{i0}{i1}
      ELSE IF level = 2 THEN
        i2 = idx[level]
        tmp = root{i0}{i1}{i2}
      ELSE IF level = 3 THEN
        i3 = idx[level]
        tmp = root{i0}{i1}{i2}{i3}
      ELSE IF level = 4 THEN
        i4 = idx[level]
        tmp = root{i0}{i1}{i2}{i3}{i4}
      ELSE IF level = 5 THEN
        i5 = idx[level]
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}
      ELSE IF level = 6 THEN
        i6 = idx[level]
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}
      ELSE IF level = 7 THEN
        i7 = idx[level]
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}
      ELSE IF level = 8 THEN
        i8 = idx[level]
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}
      ELSE IF level = 9 THEN
        i9 = idx[level]
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}
      ELSE IF level = 10 THEN
        i10 = idx[level]
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}
      ELSE IF level = 11 THEN
        i11 = idx[level]
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}
      ELSE IF level = 12 THEN
        i12 = idx[level]
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{i12}
      ELSE IF level = 13 THEN
        i13 = idx[level]
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{i12}{i13}
      ELSE IF level = 14 THEN
        i14 = idx[level]
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{i12}{i13}{i14}
      END IF
        level += 1
      FOR cnt = 0 TO count(arr) -1
        objArray = getObject(arr,cnt)
        ' Update array index count
        mkarray(objArray)
        level -= 1
        IF cnt = count(arr) -1 THEN
          idx[level] = 1
        ELSE
          idx[level] += 1
        END IF
        IF level = 0 THEN
          i0 = idx[level]
        ELSE IF level = 1 THEN
          i1 = idx[level]
        ELSE IF level = 2 THEN
          i2 = idx[level]
        ELSE IF level = 3 THEN
          i3 = idx[level]
        ELSE IF level = 4 THEN
          i4 = idx[level]
        ELSE IF level = 5 THEN
          i5 = idx[level]
        ELSE IF level = 6 THEN
          i6 = idx[level]
        ELSE IF level = 7 THEN
          i7 = idx[level]
        ELSE IF level = 8 THEN
          i8 = idx[level]
        ELSE IF level = 9 THEN
          i9 = idx[level]
        ELSE IF level = 10 THEN
          i10 = idx[level]
        ELSE IF level = 11 THEN
          i11 = idx[level]
        ELSE IF level = 12 THEN
          i12 = idx[level]
        ELSE IF level = 13 THEN
          i13 = idx[level]
        ELSE IF level = 14 THEN
          i14 = idx[level]
        END IF
        level += 1
      NEXT
      level -= 2
    ELSE IF jType = 4 THEN
      ' Object - Child definition (name only)
      IF level = 0 THEN
        i0 = oname
      ELSE IF level = 1 THEN
        i1 = oname
        tmp = root{i0}{i1}
      ELSE IF level = 2 THEN
        i2 = oname
        tmp = root{i0}{i1}{i2}
      ELSE IF level = 3 THEN
        i3 = oname
        tmp = root{i0}{i1}{i2}{i3}
      ELSE IF level = 4 THEN
        i4 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}
      ELSE IF level = 5 THEN
        i5 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}
      ELSE IF level = 6 THEN
        i6 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}
      ELSE IF level = 7 THEN
        i7 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}
      ELSE IF level = 8 THEN
        i8 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}
      ELSE IF level = 9 THEN
        i9 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}
      ELSE IF level = 10 THEN
        i10 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}
      ELSE IF level = 11 THEN
        i11 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}
      ELSE IF level = 12 THEN
        i12 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{i12}
      ELSE IF level = 13 THEN
        i13 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{i12}{i13}
      ELSE IF level = 14 THEN
        i14 = oname
        tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{i12}{i13}{i14}
      END IF
      level += 1
      mkarray(tmpObj)
      level -= 1
    ELSE
      IF objtype(obj,j) = 2 THEN
        ' Quoted data
        IF level = 0 THEN
          root{oname} = get(obj, oname)
        ELSE IF level = 1 THEN
          root{i0}{oname} = get(obj, oname)
        ELSE IF level = 2 THEN
          root{i0}{i1}{oname} = get(obj, oname)
        ELSE IF level = 3 THEN
          root{i0}{i1}{i2}{oname} = get(obj, oname)
        ELSE IF level = 4 THEN
          root{i0}{i1}{i2}{i3}{oname} = get(obj, oname)
        ELSE IF level = 5 THEN
          root{i0}{i1}{i2}{i3}{i4}{oname} = get(obj, oname)
        ELSE IF level = 6 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{oname} = get(obj, oname)
        ELSE IF level = 7 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{oname} = get(obj, oname)
        ELSE IF level = 8 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{oname} = get(obj, oname)
        ELSE IF level = 9 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{oname} = get(obj, oname)
        ELSE IF level = 10 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{oname} = get(obj, oname)
        ELSE IF level = 11 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{oname} = get(obj, oname)
        ELSE IF level = 12 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{oname} = get(obj, oname)
        ELSE IF level = 13 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{i12}{oname} = get(obj, oname)
        ELSE IF level = 14 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{i12}{i13}{oname} = get(obj, oname)
        END IF
      ELSE
        ' Numeric or Boolean data
        IF objtype(obj,j) = 6 THEN
          IF get(obj, oname) = 0 THEN
            nostr = "FALSE"
          ELSE
            nostr = "TRUE"
          END IF
        ELSE
          nostr = VAL(get(obj, oname))
        END IF
        IF level = 0 THEN
          root{oname} = nostr
        ELSE IF level = 1 THEN
          root{i0}{oname} = nostr
        ELSE IF level = 2 THEN
          root{i0}{i1}{oname} = nostr
        ELSE IF level = 3 THEN
          root{i0}{i1}{i2}{oname} = nostr
        ELSE IF level = 4 THEN
          root{i0}{i1}{i2}{i3}{oname} = nostr
        ELSE IF level = 5 THEN
          root{i0}{i1}{i2}{i3}{i4}{oname} = nostr
        ELSE IF level = 6 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{oname} = nostr
        ELSE IF level = 7 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{oname} = nostr
        ELSE IF level = 8 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{oname} = nostr
        ELSE IF level = 9 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{oname} = nostr
        ELSE IF level = 10 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{oname} = nostr
        ELSE IF level = 11 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{oname} = nostr
        ELSE IF level = 12 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{oname} = nostr
        ELSE IF level = 13 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{i12}{oname} = nostr
        ELSE IF level = 14 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}{i10}{i11}{i12}{i13}{oname} = nostr
        END IF
      END IF
    END IF
  NEXT

END SUB

SUB json2sba(json)

level = 0
idx[0] = 1
idx[1] = 1
idx[2] = 1
idx[3] = 1
idx[4] = 1
idx[5] = 1
idx[6] = 1
idx[7] = 1
idx[8] = 1
idx[9] = 1
idx[10] = 1
idx[11] = 1
idx[12] = 1
idx[13] = 1
idx[14] = 1

json_obj = loadstr(json)
mkarray(json_obj)
json = root
root[] = undef

END SUB


SUB convert(jo)
  LOCAL x

  FOR x = 0 TO UBOUND(jo) STEP 2

    IF TYPE(jo[x]) = 3 THEN
      ' Array
    ELSE
      out &= "\"" & jo[x] & "\":"
    END IF
    IF TYPE(jo[x + 1]) = 4 THEN
      IF TYPE(jo[x + 1][0]) = 3 THEN
        out &= "["
      ELSE
         out &= "{"
      END IF
      convert(jo[x + 1], i)
      IF UBOUND(jo) = (x + 1) THEN
        IF TYPE(jo[x + 1][0]) = 3 THEN
          out &= "]"
        ELSE
          out &= "}"
        END IF
      ELSE
        IF TYPE(jo[x + 1][0]) = 3 THEN
          out &= "],"
        ELSE
          out &= "},"
        END IF
      END IF
    ELSE
      IF UBOUND(jo) = (x + 1) THEN
        IF ISNUMERIC(jo[x + 1]) THEN
          out &= FORMAT("%g",jo[x + 1])
        ELSE IF jo[x + 1] <> UNDEF THEN
          IF jo[x + 1] = "TRUE" THEN
            out &= "true"
          ELSE IF jo[x + 1] = "FALSE" THEN
            out &= "false"
          ELSE
            out &= "\"" & jo[x + 1] & "\""
          END IF
        ELSE
          IF TYPE(jo[x]) <> 3 THEN
            out &= "{}"
          END IF
        END IF
      ELSE
        IF ISNUMERIC(jo[x + 1]) THEN
          out &= FORMAT("%g",jo[x + 1]) & ","
        ELSE IF jo[x + 1] <> UNDEF THEN
          IF jo[x + 1] = "TRUE" THEN
            out &= "true,"
          ELSE IF jo[x + 1] = "FALSE" THEN
            out &= "false,"
          ELSE
            out &= "\"" & jo[x + 1] & "\","
          END IF
        ELSE
          out &= "{},"
        END IF
      END IF
    END IF
  NEXT
END SUB

FUNCTION sba2json(sba)
LOCAL out
  out = "{"
  convert(sba)
  out &= "}"

  sba2json = out

END FUNCTION

SUB dump(jo, i)
  LOCAL x, y

  IF TYPE(jo[0]) = 4 THEN
    FOR y = 0 TO UBOUND(jo)
      PRINT SPACE(i), "[", y, "]\n"
      i += 3
      dump(jo[y], i)
      i -= 3
    NEXT
  ELSE
    FOR x = 0 TO UBOUND(jo) STEP 2
      IF TYPE(jo[x]) = 3 THEN
        PRINT SPACE(i), "[", jo[x], "]"
      ELSE
        PRINT SPACE(i), jo[x]
      END IF
      IF TYPE(jo[x + 1]) = 4 THEN
        PRINT
        i += 3
        dump(jo[x + 1], i)
        i -= 3
      ELSE
        PRINT " = ", jo[x + 1], "\n"
      END IF
    NEXT
  END IF
END SUB

SUB sbadump(sba)
  dump(sba, 0)
END SUB

END MODULE

' WebExt Functions

MODULE WEB

DECLARE SUB ::base64_encode ALIAS "base64_encode" LIB "webext"
DECLARE SUB ::base64_decode ALIAS "base64_decode" LIB "webext"
DECLARE SUB ::hmacsha256 ALIAS "hmacsha256" LIB "webext"
DECLARE SUB ::LoadString ALIAS "loadstring" LIB "t"

FUNCTION Bin2Hex(AsciiStr)
  LOCAL AsciiLen,ScanPos,HexStr
  AsciiLen = LEN(AsciiStr)
  IF AsciiLen THEN
    FOR ScanPos = 1 TO AsciiLen
      HexStr &= RIGHT("0" & LCASE(HEX(ASC(MID(AsciiStr, ScanPos, 1)))),2)
    NEXT ScanPos
  ELSE
    HexStr = ""
  END IF
  Bin2Hex = HexStr
END FUNCTION

FUNCTION Hex2Bin(HexStr)

  LOCAL LenHex, AsciiStr, HexTable, ScanPos, HiByte, LowByte
  LenHex = LEN(HexStr)
  IF LenHex % 2 = 0 THEN
    HexTable = "0123456789ABCDEF"
    FOR ScanPos = 1 TO LenHex STEP 2
      HiByte = INSTR(HexTable,UCASE(MID(HexStr, ScanPos, 1))) - 1
      LowByte = INSTR(HexTable,UCASE(MID(HexStr, ScanPos + 1, 1))) - 1
      IF ISINTEGER(HiByte) AND ISINTEGER(LowByte) THEN
        AsciiStr &= CHR(HiByte * 16 + LowByte)
      ELSE
        AsciiStr = ""
        GOTO Exit_For
      END IF
    NEXT ScanPos
    Exit_For:
  ELSE
    AsciiStr = ""
  END IF
  Hex2Bin = AsciiStr

END FUNCTION

FUNCTION MATCH(index)
  MATCH = JOKER(index)
END FUNCTION

SUB json2sba(json)
  LOCAL os, starset, jc, x, ls, kda, level, jp, idx, lp, root, tmp
  LOCAL i0, i1, i2, i3, i4, i5, i6, i7, i8, i9

  instar = 0
  ndp = ""
  os = ""
  jc = 1

  FOR x = 1 TO LEN(json)

    ls = MID(json, x, 1)

    IF ls = CHR(34) THEN
      IF instar = 1 THEN
        IF MID(json, x -1, 1) = CHR(92) THEN
          instar = 1
        ELSE
          instar = 0
        END IF
      ELSE
        instar = 1
      END IF
    END IF
    IF instar = 0 THEN
      IF ls = "{" OR _
         ls = "}" OR _
         ls = "[" OR _
         ls = "]" OR _
         ls = "," THEN
  '      os &= ls
        IF LEN(ndp) THEN
          kda[jc] = ndp
          os &= "*"
          ndp = ""
          jc += 1
          starset = 0
        END IF
        os &= ls
      ELSE
        ndp &= ls
      END IF
    ELSE
      ndp &= ls
    END IF

  NEXT

  level = 0
  jp =1
  idx[0] = 1
  idx[1] = 1
  idx[2] = 1
  idx[3] = 1
  idx[4] = 1
  idx[5] = 1
  idx[6] = 1
  idx[7] = 1
  idx[8] = 1
  idx[9] = 1

  os = MID(os, 2, LEN(os) - 2)

  FOR lp = 1 TO LEN(os)
    os_chr = MID(os, lp, 1)
    IF MID(os, lp, 1) = "{" THEN
      level += 1
    ELSE IF MID(os, lp, 1) = "}" THEN
      level -= 1
      IF MID(os, lp, 3) = "},{" THEN
        idx[level] += 1
        IF level = 0 THEN
          i0 = idx[level]
        ELSE IF level = 1 THEN
          i1 = idx[level]
        ELSE IF level = 2 THEN
          i2 = idx[level]
        ELSE IF level = 3 THEN
          i3 = idx[level]
        ELSE IF level = 4 THEN
          i4 = idx[level]
        ELSE IF level = 5 THEN
          i5 = idx[level]
        ELSE IF level = 6 THEN
          i6 = idx[level]
        ELSE IF level = 7 THEN
          i7 = idx[level]
        ELSE IF level = 8 THEN
          i8 = idx[level]
        ELSE IF level = 9 THEN
          i9 = idx[level]
        END IF
      END IF
    ELSE IF MID(os, lp, 1) = "[" THEN
      level += 1
        IF level = 0 THEN
          i0 = idx[level]
          tmp = root{io}
        ELSE IF level = 1 THEN
          i1 = idx[level]
          tmp = root{i0}{i1}
        ELSE IF level = 2 THEN
          i2 = idx[level]
          tmp = root{i0}{i1}{i2}
        ELSE IF level = 3 THEN
          i3 = idx[level]
          tmp = root{i0}{i1}{i2}{i3}
        ELSE IF level = 4 THEN
          i4 = idx[level]
          tmp = root{i0}{i1}{i2}{i3}{i4}
        ELSE IF level = 5 THEN
          i5 = idx[level]
          tmp = root{i0}{i1}{i2}{i3}{i4}{i5}
        ELSE IF level = 6 THEN
          i6 = idx[level]
          tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}
        ELSE IF level = 7 THEN
          i7 = idx[level]
          tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}
        ELSE IF level = 8 THEN
          i8 = idx[level]
          tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}
        ELSE IF level = 9 THEN
          i9 = idx[level]
          tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{i9}
        END IF
    ELSE IF MID(os, lp, 1) = "]" THEN
      idx[level] = 1
      level -= 1
    ELSE IF MID(os, lp, 1) = "," THEN

    ELSE IF MID(os, lp, 1) = "*" THEN
      IF kda[jp] LIKE "\"*\":" THEN
        IF level = 0 THEN
          i0 = JOKER(1)
        ELSE IF level = 1 THEN
          i1 = JOKER(1)
          tmp = root{i0}{i1}
        ELSE IF level = 2 THEN
          i2 = JOKER(1)
          tmp = root{i0}{i1}{i2}
        ELSE IF level = 3 THEN
          i3 = JOKER(1)
          tmp = root{i0}{i1}{i2}{i3}
        ELSE IF level = 4 THEN
          i4 = JOKER(1)
          tmp = root{i0}{i1}{i2}{i3}{i4}
        ELSE IF level = 5 THEN
          i5 = JOKER(1)
          tmp = root{i0}{i1}{i2}{i3}{i4}{i5}
        ELSE IF level = 6 THEN
          i6 = JOKER(1)
          tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}
        ELSE IF level = 7 THEN
          i7 = JOKER(1)
          tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}
        ELSE IF level = 8 THEN
          i8 = JOKER(1)
          tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}
        ELSE IF level = 9 THEN
          i9 = JOKER(1)
          tmp = root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}
        END IF
      END IF
      IF kda[jp] LIKE "\"*\":\"*\"" THEN
        IF level = 0 THEN
          root{JOKER(1)} = JOKER(2)
        ELSE IF level = 1 THEN
          root{i0}{JOKER(1)} = JOKER(2)
        ELSE IF level = 2 THEN
          root{i0}{i1}{JOKER(1)} = JOKER(2)
        ELSE IF level = 3 THEN
          root{i0}{i1}{i2}{JOKER(1)} = JOKER(2)
        ELSE IF level = 4 THEN
          root{i0}{i1}{i2}{i3}{JOKER(1)} = JOKER(2)
        ELSE IF level = 5 THEN
          root{i0}{i1}{i2}{i3}{i4}{JOKER(1)} = JOKER(2)
        ELSE IF level = 6 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{JOKER(1)} = JOKER(2)
        ELSE IF level = 7 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{JOKER(1)} = JOKER(2)
        ELSE IF level = 8 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{JOKER(1)} = JOKER(2)
        ELSE IF level = 9 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{JOKER(1)} = JOKER(2)
        END IF
      ELSE IF kda[jp] LIKE "\"*\":*" THEN
        nostr = JOKER(2)
        IF UCASE(nostr) = "TRUE" THEN
           nostr = "true"
        ELSE IF UCASE(nostr) = "FALSE" THEN
           nostr = "false"
        ELSE
           nostr = VAL(JOKER(2))
        END IF
        IF level = 0 THEN
          root{JOKER(1)} = nostr
        ELSE IF level = 1 THEN
          root{i0}{JOKER(1)} = nostr
        ELSE IF level = 2 THEN
          root{i0}{i1}{JOKER(1)} = nostr
        ELSE IF level = 3 THEN
          root{i0}{i1}{i2}{JOKER(1)} = nostr
        ELSE IF level = 4 THEN
          root{i0}{i1}{i2}{i3}{JOKER(1)} = nostr
        ELSE IF level = 5 THEN
          root{i0}{i1}{i2}{i3}{i4}{JOKER(1)} = nostr
        ELSE IF level = 6 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{JOKER(1)} = nostr
        ELSE IF level = 7 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{JOKER(1)} = nostr
        ELSE IF level = 8 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{JOKER(1)} = nostr
        ELSE IF level = 9 THEN
          root{i0}{i1}{i2}{i3}{i4}{i5}{i6}{i7}{i8}{JOKER(1)} = nostr
        END IF
      END IF
      jp += 1
    END IF
  NEXT

  json = root

END SUB

SUB convert(jo)
  LOCAL x

  FOR x = 0 TO UBOUND(jo) STEP 2
    IF TYPE(jo[x]) = 3 THEN

    ELSE
      out &= "\"" & jo[x] & "\":"
    END IF
    IF TYPE(jo[x + 1]) = 4 THEN
      IF TYPE(jo[x + 1][0]) = 3 THEN
        out &= "["
      ELSE
         out &= "{"
      END IF
      convert(jo[x + 1], i)
      IF UBOUND(jo) = (x + 1) THEN
        IF TYPE(jo[x + 1][0]) = 3 THEN
          out &= "]"
        ELSE
          out &= "}"
        END IF
      ELSE
        IF TYPE(jo[x + 1][0]) = 3 THEN
          out &= "],"
        ELSE
          out &= "},"
        END IF
      END IF
    ELSE
      IF UBOUND(jo) = (x + 1) THEN
        IF ISINTEGER(jo[x + 1]) THEN
          out &= jo[x + 1]
        ELSE
          out &= "\"" & jo[x + 1] & "\""
        END IF
      ELSE
        IF ISINTEGER(jo[x + 1]) THEN
          out &= jo[x + 1] & ","
        ELSE
          out &= "\"" & jo[x + 1] & "\","
        END IF
      END IF
    END IF
  NEXT
END SUB

FUNCTION sba2json(sba)

  out = "{"
  convert(sba)
  out &= "}"

  sba2json = out

END FUNCTION

SUB sbadump(jo, i)
  LOCAL x, y

  IF TYPE(jo[0]) = 4 THEN
    FOR y = 0 TO UBOUND(jo)
      PRINT SPACE(i), "[", y, "]\n"
      i += 3
      sbadump(jo[y], i)
      i -= 3
    NEXT
  ELSE
    FOR x = 0 TO UBOUND(jo) STEP 2
      IF TYPE(jo[x]) = 3 THEN
        PRINT SPACE(i), "[", jo[x], "]"
      ELSE
        PRINT SPACE(i), jo[x]
      END IF
      IF TYPE(jo[x + 1]) = 4 THEN
        PRINT
        i += 3
        sbadump(jo[x + 1], i)
        i -= 3
      ELSE
        PRINT " = ", jo[x + 1], "\n"
      END IF
    NEXT
  END IF
END SUB


END MODULE